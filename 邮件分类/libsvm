#-*- coding: utf-8 -*-
import sys
sys.path.append(r'F:\libsvm-3.23\python')

import os
os.chdir(r'F:\libsvm-3.23\python')

from svmutil import *
import copy
# from libsvm.python.svm import *
# from libsvm.python.svmutil import *

list_file = ['0','1','2','3','4']
Y = []
X = []
preciousrate = 0.0
recallrate = 0.0
F1val = 0.0
roundnum = 0
for file in list_file:
	yt, xt = svm_read_problem(r'C:\Users\lxueqian\Desktop\Assignment-II-pak (1)\AssignmentII-dataset\dataset\S'+file+'.txt') #测试集
	listfile = copy.deepcopy(list_file)
	listfile.remove(file)
	for f in listfile:
		y,x = svm_read_problem(r'C:\Users\lxueqian\Desktop\Assignment-II-pak (1)\AssignmentII-dataset\dataset\S'+f+'.txt')  #训练集
		Y.extend(y)
		X.extend(x)
	# print prob

	m = svm_train(Y, X, '-t 0 -c 4 -b 1 -h 0')
	p_label, p_acc, p_val = svm_predict(yt, xt, m, '-b 1')

	count = 0     #计算精度、召回率、F1值
	for i,item in enumerate(p_label):
		if item == 1.0 and yt[i] == 1.0:
			count += 1

	if p_label.count(1.0) != 0 and yt.count(1.0) != 0:
		precious = count/float(p_label.count(1.0))
		recall = float(count)/yt.count(1.0)
		F1 = (2*precious*recall)/(precious+recall)
	else:
		precious = None
		recall = None
		F1 = None
	if precious != None and recall != None and F1 != None:
		preciousrate += precious
		recallrate += recall
		F1val += F1
		roundnum += 1
	
	# svm_save_model('textclassifymodel.txt', m)

	# m = svm_load_model('textclassifymodel.txt')
	# ACC, MSE, SCC = evaluations(yt, p_label)
	print "第%d轮训练"%roundnum
	print "精度：%f"%precious
	print "召回率：%f"%recall
	print "F1值：%f"%F1

avg_precious = preciousrate/roundnum
avg_recall = recallrate/roundnum
avg_F1val = F1val/roundnum

print "训练轮数：%d"%roundnum
print "平均精度：%f"%avg_precious
print "平均召回率：%f"%avg_recall
print "平均F1值：%f"%avg_F1val

# model = svm_train(y, x)
# svm_save_model('model_file', model)
# print('test:')
# p_label, p_acc, p_val = svm_predict(yt[200:202], xt[200:202], model)
# print(p_label)


# svm-train -s 0 -v 5 temp.txt featurefile.txt
# svm-scale -l 0 -u 1 -s txt_temp.txt txt_featurefile.txt
# svm-scale -r temp.txt txt_featurefile.txt
# svm-train -c 32.0 -g 0.0078125 feature_scale.txt model.txt
# svm-predict txt_feature_scale.txt model.txt result.txt


# y, x = svm_read_problem('../heart_scale')#读取自带数据
# m = svm_train(y[:200], x[:200], '-t 0 -c 4 -b 1')
# p_label, p_acc, p_val = svm_predict(y[200:], x[200:], m, '-b 1')
# svm_save_model('textclassifymodel.txt', m)
# #print p_label,p_val
# ACC, MSE, SCC = evaluations(y[200:], p_label)	
# print ACC, MSE, SCC
